/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NAV_L 1
#define NUM_L 2
#define MED_L 3
#define FUN_L 4
#define SYM_L 5

&lt {
    tapping-term-ms = <180>;
};

/ {
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };

    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L NAV_L>;
	    then-layer = <MED_L>;
        };
    };
    combos {
        compatible = "zmk,combos";

	l_curly_bracket {
	    timeout-ms = <50>;
            key-positions = <2 14>;
            bindings = <&kp LS(LBKT)>;
	    layers = <NUM_L>;
	};

	r_curly_bracket {
	    timeout-ms = <50>;
            key-positions = <4 16>;
            bindings = <&kp LS(RBKT)>;
	    layers = <NUM_L>;
	};

	lbracket {
	    timeout-ms = <50>;
            key-positions = <14 26>;
            bindings = <&kp LBKT>;
	    layers = <NUM_L>;
	};

	rbracket {
	    timeout-ms = <50>;
            key-positions = <16 28>;
            bindings = <&kp RBKT>;
	    layers = <NUM_L>;
	};

	ques_mark_combo {
	    timeout-ms = <50>;
            key-positions = <21 33>;
            bindings = <&kp LS(FSLH)>;
	};

	bslash_combo {
	    timeout-ms = <50>;
            key-positions = <10 22>;
            bindings = <&kp BSLH>;
	};

	fslash_combo {
	    timeout-ms = <50>;
            key-positions = <22 34>;
            bindings = <&kp FSLH>;
	};

	bootloader_combo {
	    timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&bootloader>;
	    layers = <MED_L>;
	};

    };


    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            label = "Qwerty";
            bindings = <
       &kp TAB      &kp Q      &kp W      &kp E       &kp R          &kp T         &kp Y            &kp U          &kp I       &kp O      &kp P    &kp BSLH
       &mo MED_L    &kp A      &kp S      &kp D       &kp F          &kp G         &kp H            &kp J          &kp K       &kp L      &kp SEMI &kp QUOT
       &kp ESC      &kp Z      &kp X      &kp C       &kp V          &kp B         &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH &kp GRAVE
                                          &mo FUN_L   &mo NUM_L      &kp ENTER     &lt NAV_L SPACE  &kp RALT &mo FUN_L
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
       &trans         &trans     &trans     &trans      &trans          &trans       &none        &kp PG_UP      &kp UARW   &kp PG_DN  &none     &kp INS
       &trans         &sk LGUI   &sk LALT   &sk LSHFT   &sk LCTRL       &trans       &kp HOME      &kp LARW      &kp DARW   &kp RARW   &kp BKSP  &none
       &trans         &kp LG(Z)  &kp LG(X)  &kp LG(C)   &kp LG(V)       $trans       &kp END       &none         &none      &none      &kp DEL   &trans
                                           &none  &trans          &trans       &kp RET          &trans &none
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
       &none         &kp ESC   &kp N7     &kp N8       &kp N9          &kp RBKT      &kp FLSH     &kp N7   &kp N8      &kp N9     &trans   &none
       &none         &kp MINUS &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP    &kp C_NEXT     &kp EQUAL     &kp N4   &kp N5      &kp N6     &sk LSHFT &none
       &none         &kp PLUS  &kp N1     &kp N2       &kp N3          &kp C_PLAY_PAUSE        &kp N0     &kp N1   &kp N2      &kp N3     &bt BT_SEL 4 &none
                                          &none   &trans          &trans        &trans        &trans &none
            >;
        };

        media_layer {
            label = "Media";
            bindings = <
       &none         &trans	   &trans     &trans      &trans          &trans       &trans           &kp C_PREV     &kp C_VOL_DN     &kp C_VOL_UP &kp C_NEXT &none
       &none         &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans           &trans       &trans &none
       &none         &trans     &trans     &trans      &trans          &trans       &trans           &trans         &kp C_PLAY_PAUSE &kp C_MUTE       &trans &none
                                           &none  &trans          &trans       &trans           &trans &none
            >;
        };

        fun_layer {
            label = "Function";
            bindings = <
       &none         &trans	   &trans     &trans      &trans          &trans       &trans           &kp C_PREV     &kp C_VOL_DN     &kp C_VOL_UP &kp C_NEXT &none
       &none         &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans           &trans       &trans &none
       &none         &trans     &trans     &trans      &trans          &trans       &trans           &trans         &kp C_PLAY_PAUSE &kp C_MUTE       &trans &none
                                           &none  &trans          &trans       &trans           &trans &none
            >;
        };
    };
};
