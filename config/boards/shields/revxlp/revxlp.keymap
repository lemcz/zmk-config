/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3
#define FUN_L 4

&lt {
    tapping-term-ms = <180>;
};

/ {
    tap_dances {
    	shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTY";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
	    };
    };

    cond_layers {
        compatible = "zmk,conditional-layers";
	    tri {
            if-layers = <NUM_L NAV_L>;
            then-layer = <FUN_L>;
        };
    };

    combos {
        compatible = "zmk,combos";

    shift_combo {
      timeout-ms = <50>;
      key-positions = <36 37>;
      bindings = <&kp LSHFT>;
    };

    colon_combo {
      timeout-ms = <50>;
      key-positions = <22 23>;
      bindings = <&kp COLON>;
      layers = <DEFAULT_L>;
    };

	l_curly_bracket {
	    timeout-ms = <50>;
            key-positions = <2 14>;
            bindings = <&kp LS(LBKT)>;
	    layers = <NUM_L>;
	};

	r_curly_bracket {
	    timeout-ms = <50>;
            key-positions = <4 16>;
            bindings = <&kp LS(RBKT)>;
	    layers = <NUM_L>;
	};

	lbracket {
	    timeout-ms = <50>;
            key-positions = <14 26>;
            bindings = <&kp LBKT>;
	    layers = <NUM_L>;
	};

	rbracket {
	    timeout-ms = <50>;
            key-positions = <16 28>;
            bindings = <&kp RBKT>;
	    layers = <NUM_L>;
	};

	ques_mark_combo {
	    timeout-ms = <50>;
            key-positions = <21 33>;
            bindings = <&kp LS(FSLH)>;
	};

	bslash_combo {
	    timeout-ms = <50>;
            key-positions = <10 22>;
            bindings = <&kp BSLH>;
	};

	fslash_combo {
	    timeout-ms = <50>;
            key-positions = <22 34>;
            bindings = <&kp FSLH>;
	};

	bootloader_combo {
	    timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&bootloader>;
	    layers = <FUN_L>;
	};

    };


        keymap {
                compatible = "zmk,keymap";

        qwerty_layer {
            label = "Qwerty";
            bindings = <
        &kp TAB      &kp Q      &kp W      &kp E       &kp R          &kp T         &kp Y            &kp U          &kp I       &kp O      &kp P    &kp BSLH
        &mo FUN_L    &kp A      &kp S      &kp D       &kp F          &kp G         &kp H            &kp J          &kp K       &kp L      &kp SEMI &kp QUOT
        &kp ESC      &kp Z      &kp X      &kp C       &kp V          &kp B         &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH &kp GRAVE
                                          &mo NUM_L   &mo SYM_L      &kp ENTER     &lt NAV_L SPACE  &kp RALT &mo NUM_L
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
        &kp TAB  &trans     &trans     &trans      &trans          &trans       &none        &kp PG_UP    &kp UARW   &kp PG_DN   &none     &kp INS
        &none    &sk LGUI   &sk LALT   &sk LSHFT   &sk LCTRL       &trans       &kp HOME     &kp LARW     &kp DARW   &kp RARW    &kp BKSP  &none
        &none    &kp LG(Z)  &kp LG(X)  &kp LG(C)   &kp LG(V)       &trans       &kp END      &none        &none      &none       &kp DEL   &kp GRAVE
                                           &none  &trans          &trans       &trans    &trans  &none
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
        &none       &trans   &trans     &kp C_VOL_DN &kp C_VOL_UP  &kp C_PREV       &kp FSLH   &kp N7   &kp N8   &kp N9     &trans &none
        &none       &kp LGUI &kp LALT   &kp LSHFT    &kp LCTRL     &kp C_NEXT       &kp EQUAL  &kp N4   &kp N5   &kp N6     &none  &none
        &bt BT_CLR  &trans   &trans     &trans       &trans        &kp C_PLAY_PAUSE &kp N0     &kp N1   &kp N2   &kp N3     &kp KP_ENTER  &none
                                          &none   &trans          &trans        &trans        &trans &none
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
        &none     &trans	   &trans     &trans      &trans    &trans         &kp CARET     &kp AMPS   &kp ASTRK     &kp LPAR      &kp RPAR     &none
        &none     &kp EXCL  &kp AT     &kp HASH    &kp DLLR  &kp PRCNT      &kp EQUAL &kp MINUS      &kp LBRC      &kp LBKT      &kp BSLH     &kp GRAVE
        &none     &trans    &trans     &trans      &trans    &trans         &kp UNDER &kp PLUS       &kp RBRC      &kp RBKT      &kp PIPE     &kp TILDE
                                           &none  &trans    &trans         &trans    &trans &none
            >;
        };

        fun_layer {
            label = "Fun";
            bindings = <
        &kp CAPS  &trans	&trans     &trans      &trans     &trans         &trans    &kp F7     &kp F8     &kp F9     &kp F12     &none
        &trans    &kp LGUI  &kp LALT   &kp LSHFT   &kp LCTRL  &trans         &trans    &kp F4     &kp F5     &kp F6     &kp F11     &none
        &none     &trans    &trans     &trans      &trans     &trans         &trans    &kp F1     &kp F2     &kp F3     &kp F10     &none
                                           &none   &trans     &trans         &trans    &trans     &none
            >;
        };
    };
};
